{"version":3,"sources":["Infobox.js","LiveCases.js","LineGraph.js","Mapped.js","App.js","serviceWorker.js","index.js"],"names":["Infobox","setCasesType","active","title","cases","total","className","Card","onClick","CardContent","Typography","color","numeral","format","LiveCases","countries","map","country","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","useState","setData","useEffect","fetch","then","res","json","lastDateCases","chartData","date","newDateCases","x","y","push","length","height","datasets","backgroundColor","borderColor","casesTypeObj","multiply","recovered","deaths","Mapped","center","zoom","Map","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","App","setCountries","setCountry","setCountryInfo","liveCases","setLiveCases","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso3","sort","a","b","FormControl","Select","variant","onChange","e","selectedCountry","target","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.61313535.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport numeral from 'numeral'\r\nimport './Infobox.css'\r\n\r\nconst Infobox = ({setCasesType, active, title, cases, total}) => {\r\n    return (\r\n        <div className = {`infobox ${active && \"info__actv\"}`}>\r\n            <Card onClick = {setCasesType}>\r\n                <CardContent>\r\n                    <Typography color = \"textSecondary\">\r\n                        {title}\r\n                    </Typography>\r\n\r\n                    <h2 className = \"info__h2\" > \r\n                        {`+${numeral(cases).format(\"0.0a\")}`} \r\n                    </h2>\r\n\r\n                    <Typography color = \"textSecondary\">\r\n                        {`${numeral(total).format(\"0.0a\")} in Total`}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Infobox\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './LiveCases.css'\r\n\r\nconst LiveCases = ({countries}) => {\r\n    return (\r\n        <div className = \"livecases\">\r\n            {countries.map(({country, cases}) => \r\n                <tr>\r\n                    <td> {country} </td>\r\n                    <td><strong> {numeral(cases).format(\"0,0\")} </strong></td>\r\n                </tr>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LiveCases\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\nimport './Linegraph.css'\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point : {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral (tooltipItem.value).format(\"+0,0\")\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [{\r\n            type: \"time\",\r\n            time: {\r\n                format: \"MM/DD/YY\",\r\n                tooltipFormat: \"ll\"\r\n            },\r\n        }],\r\n        yAxes: [{\r\n            gridLines: {\r\n                display: false,\r\n            },\r\n            ticks: {\r\n                callback: function (value, index, values) {\r\n                    return numeral(value).format(\"0a\")\r\n                }\r\n            }\r\n        }]\r\n    }\r\n\r\n}\r\n\r\nconst LineGraph = ({casesType}) => {\r\n\r\n    const [data, setData] = useState({})\r\n\r\n    useEffect (() => {\r\n        fetch (\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(res => res.json())\r\n            .then (data => {\r\n                let chartData = [];\r\n                let lastDateCases;\r\n                for (let date in data[casesType]) {\r\n                    if (lastDateCases) {\r\n                        let newDateCases = {\r\n                            x: date,\r\n                            y: data[casesType][date] - lastDateCases\r\n                        }\r\n                        chartData.push (newDateCases)\r\n                    }\r\n                    lastDateCases = data[casesType][date];\r\n                }\r\n                setData (chartData)\r\n            })\r\n    }, [casesType])\r\n\r\n    return (\r\n        <div className = \"linegraph\">\r\n            {data?.length &&\r\n            <Line\r\n                height = \"100%\"\r\n                options = {options}\r\n                data = {{\r\n                    datasets: [{\r\n                        data: data,\r\n                        backgroundColor: `${casesType === \"recovered\" ? \"rgba(0, 128, 0, 0.2)\" : \"rgba(255, 0, 0, 0.2)\" }`,\r\n                        borderColor: `${casesType === \"recovered\" ? \"green\" : \"red\" }`\r\n                    }]\r\n                }}\r\n            />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React from 'react'\r\nimport {Map, TileLayer, Circle, Popup} from \"react-leaflet\"\r\nimport numeral from 'numeral'\r\nimport './Mapped.css'\r\n\r\nconst casesTypeObj = {\r\n    cases: {\r\n        color: \"red\",\r\n        multiply: 1000,\r\n    },\r\n    recovered: {\r\n        color: \"green\",\r\n        multiply: 1000,\r\n    },\r\n    deaths: {\r\n        color: \"red\",\r\n        multiply: 2000,\r\n    },\r\n}\r\n\r\nconst Mapped = ({countries, center, zoom, casesType = \"cases\"}) => {\r\n\r\n    \r\n\r\n    return (\r\n        <div className = \"mapped\">\r\n            <Map className = \"mapped__map\" center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                />\r\n                {countries?.map(country => \r\n                    <Circle\r\n                        center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n                        fillOpacity = {0.4}\r\n                        color = {casesTypeObj[casesType].color}\r\n                        fillColor = {casesTypeObj[casesType].color}\r\n                        radius = {Math.sqrt(country[casesType]) * casesTypeObj[casesType].multiply}\r\n                    >\r\n                        <Popup>\r\n                            <div className = \"info__container\">\r\n                                <div \r\n                                    className = \"info__flag\" \r\n                                    style = {{backgroundImage: `url(${country.countryInfo.flag})`}}>\r\n                                </div>\r\n                                <div className = \"info__name\">{country.country}</div>\r\n                                <div className = \"info__data\">Cases: {numeral( country.cases).format(\"0.0a\")}</div>\r\n                                <div className = \"info__data\">Recovered: {numeral( country.recovered).format(\"0.0a\")} </div>\r\n                                <div className = \"info__data\">Deaths: {numeral( country.deaths).format(\"0.0a\")} </div>\r\n                            </div>\r\n                        </Popup>\r\n                    </Circle>\r\n                )}\r\n            </Map>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mapped\r\n","import React, { useEffect, useState } from 'react';\nimport { FormControl, MenuItem, Select } from '@material-ui/core';\nimport Infobox from './Infobox';\nimport './App.css';\nimport LiveCases from './LiveCases';\nimport LineGraph from './LineGraph';\nimport Mapped from './Mapped';\nimport \"leaflet/dist/leaflet.css\"\n\nconst App = () => {\n\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState (\"Worldwide\")\n  const [countryInfo, setCountryInfo] = useState()\n  const [liveCases, setLiveCases] = useState([])\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796})\n  const [mapZoom, setMapZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState (\"cases\")\n\n  useEffect(() => {\n    \n      fetch (\"https://disease.sh/v3/covid-19/countries\")\n        .then(res => res.json())\n        .then(data => {\n          setCountries (data.map(country => ({\n            name: country.country,\n            value: country.countryInfo.iso3\n          })))\n          setMapCountries(data)\n          setLiveCases (data.sort((a, b) => a.cases > b.cases ? -1 : 1))\n      })\n\n      fetch (\"https://disease.sh/v3/covid-19/all\")\n          .then(res => res.json())\n          .then(data => setCountryInfo (data))\n\n  }, [])\n\n  const onCountryChange = (e) => {\n\n    const selectedCountry = e.target.value\n\n    setCountry (selectedCountry)\n\n    const url = selectedCountry === \"Worldwide\" \n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${selectedCountry}`\n    \n    fetch (url)\n        .then(res => res.json())\n        .then(data => {\n          setCountryInfo (data)\n          selectedCountry === \"Worldwide\" ?\n          setMapCenter ({lat: 34.80746, lng: -40.4796}) :\n          setMapCenter ([data.countryInfo.lat, data.countryInfo.long])\n          setMapZoom (4)\n        })\n  }\n\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"app__left\">\n\n        <div className=\"app__header\">\n          <h1 className = \"app__title\"> COVID19 TRACKER\n            <div className=\"blink__icon\"></div>\n          </h1>\n          <FormControl className = \"app__dropdown\">\n            <Select\n              value = {country}\n              variant = \"outlined\"\n              onChange = {onCountryChange}\n            >\n              <MenuItem value = \"Worldwide\"> Worldwide </MenuItem>\n              {countries.map (country => \n                <MenuItem value = {country.value}> {country.name} </MenuItem>  \n              )}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <Infobox \n            setCasesType = {() => setCasesType(\"cases\")} \n            active = {casesType === \"cases\"}\n            title = \"CoronaVirus Cases\" \n            cases = {countryInfo?.todayCases} \n            total = {countryInfo?.cases} \n          />\n          <Infobox \n            setCasesType = {() => setCasesType(\"recovered\")} \n            active = {casesType === \"recovered\"}\n            title = \"Recovered\" \n            cases = {countryInfo?.todayRecovered} \n            total = {countryInfo?.recovered} \n          />\n          <Infobox \n            setCasesType = {() => setCasesType(\"deaths\")} \n            active = {casesType === \"deaths\"}\n            title = \"Deaths\" \n            cases = {countryInfo?.todayDeaths} \n            total = {countryInfo?.deaths} \n          />\n        </div>\n\n        <Mapped casesType = {casesType} countries = {mapCountries} center = {mapCenter} zoom = {mapZoom}/>\n\n      </div>\n\n      <div className=\"app__right\">\n        <h3>Live Cases by Country</h3>\n        <LiveCases countries = {liveCases}/>\n\n        <h3 className = \"New__cases\">Worldwide New {casesType}</h3>\n        <LineGraph casesType = {casesType}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}